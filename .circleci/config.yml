version: 2.1

workflows:
  version: 2
  build-and-deploy:
    jobs:
    - build
#    - sonar-scan:
#        requires:
#        - build
    - deploy:
        requires:
        - build

jobs:
  build:
    docker:
    # specify the version you desire here
    - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
    - checkout

    - setup_remote_docker

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "pom.xml" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run: mvn dependency:go-offline

    - save_cache:
        paths:
        - ~/.m2
        key: v1-dependencies-{{ checksum "pom.xml" }}

    - run: mvn integration-test verify

    - run:
        command: |
          docker login -u $DOCKER_USER -p $DOCKER_PASS

    # build the application image
    - run: docker build --build-arg JAR_FILE=/target/*.jar -t mdgriffin/devops-project:$CIRCLE_BUILD_NUM .

    # deploy the image to Docker Hub
    - run:
        name: Push Docker image to container registry
        command: |
          docker push mdgriffin/devops-project:$CIRCLE_BUILD_NUM
          echo "export DOCKER_IMAGE=registry.hub.docker.com/mdgriffin/devops-project:${CIRCLE_BUILD_NUM}" > /tmp/docker_image

    - persist_to_workspace:
        root: ~/repo
        paths:
        - target/classes/torclms/**
        - src/**
        - config

    - persist_to_workspace:
        root: /tmp
        paths:
        - docker_image

    - store_test_results:
        path: target/surefire-reports

  sonar-scan:
    docker:
    - image: newtmitch/sonar-scanner

    working_directory: /tmp/workspace

    steps:

    - attach_workspace:
        at: /tmp/workspace
    - run:
        name: Testing Sonar Cloud Version
        command: |
          sonar-scanner --version

    - run:
        name: Test Files
        command: |
          ls -R ./**

    - run:
        name: Run Sonar Scanner
        command: |
          sonar-scanner \
          -Dsonar.organization=${CIRCLE_PROJECT_USERNAME} \
          -Dsonar.projectKey=${CIRCLE_PROJECT_USERNAME}_${CIRCLE_PROJECT_REPONAME} \
          -Dsonar.projectName="${CIRCLE_PROJECT_USERNAME} ${CIRCLE_PROJECT_REPONAME}" \
          -Dsonar.projectBaseDir=. \
          -Dsonar.sources=src \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${SONARQUBE_TOKEN} ${SONAR_SCANNER_OPTS_CUSTOM}

           curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=mdgriffin_devops-project > sonarqube_result.json

           if cat sonarqube_result.json | grep -Poq '"ERROR"'
           then
               echo 'Failed Quality Gates'
               exit 1
           else
               echo 'Passed Quality Gates'
               exit 0
           fi

  deploy:
    docker:
    - image: google/cloud-sdk

    steps:
    - attach_workspace:
        at: /tmp

    - run:
        name: Checking Files
        command: |
          ls -R /tmp

    - run:
        name: Installing Helm
        command: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get > get_helm.sh
          chmod 700 get_helm.sh
          ./get_helm.sh

    - run:
        name: Initialize & Authenticate gcloud SDK
        command: |
          # Saving Google Cloud Credentials to file
          echo "${GCP_KEY_FILE}" | base64 -i -d > /tmp/gcp_key.json

          # Saving Docker Credentials to file
          #echo "${DOCKER_CREDENTIALS}" | base64 -i -d > /tmp/docker.json

          gcloud auth activate-service-account --key-file /tmp/gcp_key.json
          gcloud config set project fyp-kubes
          gcloud config set compute/zone europe-west1-b

    - run:
        name: Create Kubernetes Cluster
        command: |

          # does cluster exist? Create or load credentials
          if gcloud container clusters describe devops-cluster > /dev/null ;then
            echo "Our cluster exists, pull credentials into kubectl"
            gcloud container clusters get-credentials devops-cluster
          else
            echo "Creating cluster for first time"
            gcloud container clusters create devops-cluster --num-nodes=3

            # Add Docker Login config secret
            echo "Creating Docker config secret"
            kubectl create secret docker-registry regcred --docker-server=registry.hub.docker.com --docker-username=$DOCKER_USER --docker-password=$DOCKER_PASS --docker-email=$DOCKER_EMAIL

            # Add Docker Creds to service account
            echo "Patching Default Service account with Docker Auth Details"
            kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "regcred"}]}'
          fi

    - run:
        name: Deploy DevOps Application onto Kubernetes Cluster
        command: |

          #push image for first run, or update existing.
          source /tmp/docker_image
          echo "Deploying Image: ${DOCKER_IMAGE}"
          if kubectl describe deployment/devops-project ;then
            echo "Updating image on existing deployment"
            kubectl set image deployment/devops-project devops-project=${DOCKER_IMAGE}
          else
            echo "running first deployment"
            kubectl run devops-project --image=${DOCKER_IMAGE} --port 9090
          fi

          kubectl rollout status deployment/devops-project

          if kubectl get service devops-project ;then
            echo "Service is exposed"
          else
            echo "Exposing deployment on Load Balancer"
            kubectl expose deployment devops-project --type=LoadBalancer --port 80 --target-port 9090
          fi

    - run:
        name: Setup Helm Tiller
        command: |

          echo "Creating Service Account for Tiller"
          # add a service account within a namespace to segregate tiller
          if ! kubectl get serviceaccount/tiller --namespace kube-system  > /dev/null ;then
            kubectl create serviceaccount --namespace kube-system tiller

            # create a cluster role binding for tiller
            kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller

            #kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
          fi

          # verify that helm is installed in the cluster
          # kubectl get deploy,svc tiller-deploy -n kube-system

          # initialized helm within the tiller service account
          helm init --service-account tiller --upgrade --wait

           # Update Helm Repo
          helm repo update

    - run:
        name: Install Prometheus onto Cluster
        command: |
          echo "Installing Prometheus"
          # Install Prometheus to cluster
          if [[ $(helm ls --deployed devops-prometheus | wc -c) -ne 0 ]]
          then
            echo "Prometheus Is Already Installed"
          else
            helm install stable/prometheus --version 8.9.0 --name devops-prometheus -f /tmp/config/prometheus-values.yml
          fi

    - run:
        name: Install Grafana onto Cluster
        command: |

          echo "Installing Grafana"
          # Install Grafana to cluster
          if [[ $(helm ls --deployed devops-grafana | wc -c) -ne 0 ]]
          then
            echo "Grafana Is Already Installed"
          else
            helm install stable/grafana --version 2.2.5 --name devops-grafana -f /tmp/config/grafana-values.yml
          fi

          echo "Getting Grafana Admin Password"
          kubectl get secret --namespace default devops-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

          # Sending Grafana Admin Password to Slack
          curl -d "{\"text\":\"Grafana Password: $(kubectl get secret --namespace default devops-grafana -o jsonpath="{.data.admin-password}" | base64 --decode)\"}" -H "Content-Type: application/json" -X POST $SLACK_WEB_HOOK

          # Getting the IP address of service and sending to slack
          curl -d "{\"text\":\"DevOps Application IP: $(kubectl get svc devops-project  -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\"}" -H "Content-Type: application/json" -X POST $SLACK_WEB_HOOK