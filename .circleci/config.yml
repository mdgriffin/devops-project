version: 2.1

#orbs:
#  sonar: bulderbank/sonar@1.2.1

workflows:
  version: 2
  build-and-deploy:
    jobs:
#    - build
    - sonar-scan
#    - sonar/scan:
#        requires:
#        - build
#    - deploy:
#        requires:
#        - build

jobs:
  build:
    docker:
    # specify the version you desire here
    - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
    - checkout

    - setup_remote_docker

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "pom.xml" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run: mvn dependency:go-offline

    - save_cache:
        paths:
        - ~/.m2
        key: v1-dependencies-{{ checksum "pom.xml" }}

    - run: mvn integration-test

    - store_artifacts:
        path: /target/devops-project-1.0-SNAPSHOT.jar

    - run:
        command: |
          docker login -u $DOCKER_USER -p $DOCKER_PASS

    # build the application image
    - run: docker build --build-arg JAR_FILE=/target/*.jar -t mdgriffin/devops-project:$CIRCLE_BUILD_NUM .

    # deploy the image
    - run:
        name: Push Docker image to container registry
        command: |
          docker push mdgriffin/devops-project:$CIRCLE_BUILD_NUM
          echo "export DOCKER_IMAGE=registry.hub.docker.com/mdgriffin/devops-project:${CIRCLE_BUILD_NUM}" > /tmp/docker_image

    - persist_to_workspace:
        root: /tmp
        paths:
        - docker_image

    - store_test_results:
        path: target/surefire-reports

  sonar-scan:
    docker:
    - image: newtmitch/sonar-scanner

    steps:
    - checkout

    - run:
        name: Testing Sonar Cloud Version
        command: |
          sonar-scanner --version

    - run:
        name: Test Checkout
          command: |
            echo ls


#    - run:
#        name: Check If Maven is Installed
#        command: |
#          sonar-scanner \
#          -Dsonar.organization=${CIRCLE_PROJECT_USERNAME} \
#          -Dsonar.projectKey=${CIRCLE_PROJECT_USERNAME}_${CIRCLE_PROJECT_REPONAME} \
#          -Dsonar.projectName="${CIRCLE_PROJECT_USERNAME} ${CIRCLE_PROJECT_REPONAME}" \
#          -Dsonar.projectBaseDir=. \
#          -Dsonar.sources=. \
#          -Dsonar.host.url=https://sonarcloud.io \
#          -Dsonar.login=${SONARQUBE_TOKEN} ${SONAR_SCANNER_OPTS_CUSTOM}

  deploy:
    docker:
    - image: google/cloud-sdk

    steps:
    - attach_workspace:
        at: /tmp

    - run:
        name: Initialize & Authenticate gcloud SDK
        command: |
          # Saving Google Cloud Credentials to file
          echo "${GCP_KEY_FILE}" | base64 -i -d > /tmp/gcp_key.json

          # Saving Docker Credentials to file
          #echo "${DOCKER_CREDENTIALS}" | base64 -i -d > /tmp/docker.json

          gcloud auth activate-service-account --key-file /tmp/gcp_key.json
          gcloud config set project fyp-kubes
          gcloud config set compute/zone europe-west1-b

          # does cluster exist? Create or load credentials
          if gcloud container clusters describe devops-cluster > /dev/null ;then
            echo "Our cluster exists, pull credentials into kubectl"
            gcloud container clusters get-credentials devops-cluster
          else
            echo "Creating cluster for first time"
            gcloud container clusters create devops-cluster --num-nodes=1

            # Add Docker Login config secret
            echo "Creating Docker config secret"
            kubectl create secret docker-registry regcred --docker-server=registry.hub.docker.com --docker-username=$DOCKER_USER --docker-password=$DOCKER_PASS --docker-email=$DOCKER_EMAIL

            # Add Docker Creds to service account
            echo "Patching Default Service account with Docker Auth Details"
            kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "regcred"}]}'
          fi

          #push image for first run, or update existing.
          source /tmp/docker_image
          echo "Deploying Image: ${DOCKER_IMAGE}"
          if kubectl describe deployment/devops-project ;then
            echo "Updating image on existing deployment"
            kubectl set image deployment/devops-project devops-project=${DOCKER_IMAGE}
          else
            echo "running first deployment"
            kubectl run devops-project --image=${DOCKER_IMAGE} --port 9090
          fi
          kubectl rollout status deployment/devops-project

          if kubectl get service devops-project ;then
            echo "Service is exposed"
          else
            echo "Exposing deployment on Load Balancer"
            kubectl expose deployment devops-project --type=LoadBalancer --port 80 --target-port 9090
          fi